---
title:    'Git & GitHub 101 - Multiplayer'
layout:   presentation
noindex:  true
---

| # Multiplayer

  ---

  ## Topics

  - GUI
  - Using terminal
  - Branch
  - Code review
  - Workflow
  - Fork

  ---

  ## Graphical User Interface

  --

  ### Command line absctraction

  [https://git-scm.com/downloads/guis](https://git-scm.com/downloads/guis)

  _Hit button instead of typing commands_

  --

  ### GitHub for windows

  [https://desktop.github.com/](https://desktop.github.com/)

  _The shell is included_

  ---

  ## Serious Business

  __Using the terminal__

  --

  ### Configure tooling

  ```sh
  vim .gitconfig
  ```

  ```
  [user]
    name = David Leuliette
    email = dleuliette@gmail.com
  [push]
    default = current
  ```
  --

  ### Install git & GitHub

  Protip: __Always__ use `ssh`

  [http://davidl.fr/git.html](http://davidl.fr/git.html)

  --

  ### Create repositories

  ```sh
  $ git init project-name
  ```
  ```sh
  $ git clone project-url
  ```

  --

  > Quand tu sais pas … fait un `status`
  > <br>
  > — Ra’s al Ghul

  --

  ### Make changes

  ```sh
  $ git status
  ```
  ```sh
  $ git diff
  ```
  ```sh
  $ git add [file]
  ```
  ```sh
  $ git commit -m [message]
  ```

  --

  ### Save fragments

  ```sh
  $ git stash
  ```
  ```sh
  $ git stash pop
  ```
  ```sh
  $ git stash list
  ```

  ---

  ## Branch

  --

  _Be careful with time paradox_

  ![git-time-travel](/assets/images/git/past.jpg)

  --

  ### Group changes

  ```sh
  $ git branch
  ```
  ```sh
  $ git checkout -b feature/awesome
  ```

  --

  ### Working with branches

  rename branch

  ```sh
  $ git branch -m feature/old-branch feature/new-branch
  ```

  delete branch

  ```sh
  $ git branch -d feature/merged-branch
  ```

  fetch a remote branch

  ```sh
  $ git checkout -t origin/feature/update-reviews
  ```

  --

  ### Synchronize changes

  ```sh
  $ git fetch
  ```
  ```sh
  $ git pull --rebase
  ```
  ```sh
  $ git push [alias] [branch]
  ```

  --

  ### Merge

  ```sh
  $ git checkout develop
  $ git pull --rebase
  $ git merge --no-ff feature/branch
  $ git push [alias] [branch]
  ```

  --

  ### Cancel (almost) everything with git
  ```sh
  $ git revert <SHA>
  ```

  [The complete list](https://github.com/blog/2019-how-to-undo-almost-anything-with-git)

  ---

  ## Code review

  --

  ### Pull-request

  --

  ![pull-request-workflow](/assets/images/git/development-workflow.jpg)

  --

  ### Pull-request level 2

  --

  ## Step 1 : qualification

      $ mkdir .github && cd $_
      $ touch pull_request_template.md

  --

  ### `PULL_REQUEST_TEMPLATE.md`

  --

  # DEMO TIME

  --

  ## Workflow

  --

  ### [git-flow](http://nvie.com/posts/a-successful-git-branching-model/)

  ![git flow](/assets/images/git/git-flow-branching-model.jpg)

  --

  ### [git-flow](http://nvie.com/posts/a-successful-git-branching-model/)

  5 January 2010 — [Vincent Driessen](https://twitter.com/nvie)

  - `master` is production with tags
  - `develop` we work from here

  <br>

  - `feature` from `develop` and merge into `develop`
  - `release` from `develop` and merge into `master` & `develop`
  - `hotfix` from `master` and merge into `master` & `develop` / `release`

  --

  [git flow extension](https://github.com/nvie/gitflow)

  ```sh
  $ git flow feature
  $ git flow feature start <name> [<base>]
  $ git flow feature finish <name>
  ```

  --

  ### [github-flow](http://scottchacon.com/2011/08/31/github-flow.html)

  ![github flow](/assets/images/git/github-flow-branching-model.jpg)

  --

  ### [github-flow](http://scottchacon.com/2011/08/31/github-flow.html)

  _31 August 2011 — [Scott Chacon](https://twitter.com/chacon)_

  1. `master` is production
  1. `feature` branch from `master`
  1. often push on `origin`
  1. open `pull-request` when you want
  1. `merge` only after a pull-request review
  1. __Deploy immediatly__ after the merge on master

  --

  ### [Trunk Based Development](http://paulhammant.com/2013/04/05/what-is-trunk-based-development/) (TBD)

  Fast but require more __concentration__ & __rigor__

  ![trunk based development](/assets/images/git/git-trunk-based-dev.jpg)

  ---

  ## Fork

  --

  ### How it works ?

  ![fork](/assets/images/git/fork.png)

  [courses.cecilitse.org](http://courses.cecilitse.org/presentations/#/)

  ---

  ## Happy Hacking!

  & celebrate

  [10 years of git](https://www.atlassian.com/git/articles/10-years-of-git/)
